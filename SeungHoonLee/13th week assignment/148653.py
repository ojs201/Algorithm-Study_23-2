"""
LV2. 마법의 엘리베이터
[https://school.programmers.co.kr/learn/courses/30/lessons/148653]

위 문제는 엘리베이터의 자릿수에 대한 아래 조건을 전제로 한다.

1. 엘리베이터의 층의 현재 자릿수가 6이상일 경우 다음 자릿수에 도달시키는 방향이 더 저렴하다.
2. 엘리베이터의 층이 현재 자릿수가 미만일 경우 0에 도달시키는 방향이 더 저렴하다.
3. 엘리베이터의 층이 현재 자릿수가 5인 경우 층의 다음 자릿수를 기준으로 판단한다.
    - 다음 자릿수가 5이상일 경우 다음 자릿수에 도달시키는 방향이 더 저렴하다.
    - 다음 자릿수가 5미만일 경우 0에 도달시키는 방향이 더 저렴하다.

e.g. 현재 층이 16층일 경우:
[첫번째 경우 => 6]
1. 16을 20으로 만든다 (현재 자릿수가 6, 따라서 6을 10으로 만듦 => 비용 4)
2. 20을 0으로 만든다 (현재 자릿수가 2, 따라서 2을 0으로 만듦 => 비용 2)

[두번째 경우 => 7]
1. 16을 6으로 만든다 (10을 1번 누름 => 비용 1)
2. 6을 0으로 만든다. (1을 6번 누름 => 비용 6)

e.g. 현재 층이 55층일 경우:
1. 55층을 60으로 만든다 (현재 자릿수가 5, 이때 다음 자릿수가 5, 따라서 5를 10으로 만듦 => 비용 5)
2. 60을 100으로 만든다 (현재 자릿수가 6, 따라서 6을 10으로 만듦 => 비용 4)
3. 100을 0으로 만든다 (현재 자릿수가 1, 따라서 1을 0으로 만듦 => 비용 1)
"""


def solution(storey):
    answer = 0

    while storey:
        q, r = divmod(storey, 10)

        if r > 5:
            answer += (10 - r)
            storey += 10
        elif r < 5:
            answer += r
        else:
            if q % 10 > 4:
                storey += 10
            answer += r

        storey //= 10

    return answer
